apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-agent-api
  namespace: micro-agent-platform
  labels:
    app.kubernetes.io/name: micro-agent-api
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/part-of: micro-agent-platform
    app.kubernetes.io/managed-by: kubernetes
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Micro-Agent API deployment with auto-scaling capabilities"
spec:
  replicas: 3  # Initial replica count, will be managed by HPA
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: micro-agent-api
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: micro-agent-api
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/part-of: micro-agent-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/api/v1/metrics"
    spec:
      imagePullSecrets:
        - name: registry-secret
      serviceAccountName: micro-agent-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: micro-agent-api
          image: micro-agent-platform:latest  # Replace with your actual image registry/repository
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # Set to true if possible after volume mounts configured
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            # Configuration from ConfigMap
            - name: FLASK_ENV
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: FLASK_ENV
            - name: FLASK_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: FLASK_DEBUG
            - name: API_PORT
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: API_PORT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: LOG_LEVEL
            - name: WORKERS
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: WORKERS
            - name: WORKER_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: WORKER_TIMEOUT
            - name: MAX_REQUESTS
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: MAX_REQUESTS
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: micro-agent-config
                  key: REDIS_PORT
            # Sensitive configuration from Secrets
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: micro-agent-secrets
                  key: API_KEY
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: micro-agent-secrets
                  key: SECRET_KEY
            - name: GEMINI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: micro-agent-secrets
                  key: GEMINI_API_KEY
                  optional: true
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: micro-agent-secrets
                  key: OPENAI_API_KEY
                  optional: true
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: micro-agent-secrets
                  key: ANTHROPIC_API_KEY
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: micro-agent-secrets
                  key: REDIS_PASSWORD
                  optional: true
            # Kubernetes-specific environment variables
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 12  # Allow 60 seconds for startup (12 * 5s)
          volumeMounts:
            - name: app-logs
              mountPath: /app/logs
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: app-logs
          emptyDir:
            sizeLimit: 1Gi
        - name: config-volume
          configMap:
            name: micro-agent-config
        - name: tmp-volume
          emptyDir:
            sizeLimit: 100Mi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-agent-redis
  namespace: micro-agent-platform
  labels:
    app.kubernetes.io/name: micro-agent-redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7.0"
    app.kubernetes.io/part-of: micro-agent-platform
spec:
  replicas: 1  # Redis typically runs as single instance
  strategy:
    type: Recreate  # Redis doesn't support rolling updates well
  selector:
    matchLabels:
      app.kubernetes.io/name: micro-agent-redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: micro-agent-redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/version: "7.0"
        app.kubernetes.io/part-of: micro-agent-platform
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: redis
          image: redis:7-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
            capabilities:
              drop:
                - ALL
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: micro-agent-secrets
                  key: REDIS_PASSWORD
          command:
            - redis-server
            - --requirepass
            - $(REDIS_PASSWORD)
            - --appendonly
            - "yes"
            - --dir
            - /data
            - --save
            - "300 1"
            - --maxmemory
            - "256mb"
            - --maxmemory-policy
            - "allkeys-lru"
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
      terminationGracePeriodSeconds: 10