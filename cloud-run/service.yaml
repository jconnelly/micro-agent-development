apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: micro-agent-api
  annotations:
    # Cloud Run specific annotations
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
    run.googleapis.com/cpu-throttling: "false"
    # VPC Connector for private resources (optional)
    # run.googleapis.com/vpc-access-connector: projects/PROJECT_ID/locations/REGION/connectors/CONNECTOR_NAME
    # run.googleapis.com/vpc-access-egress: all-traffic
spec:
  template:
    metadata:
      annotations:
        # Scaling configuration
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/maxScale: "100"
        # Performance configuration
        run.googleapis.com/memory: "2Gi"
        run.googleapis.com/cpu: "2"
        run.googleapis.com/timeout: "300s"
        # Container configuration
        run.googleapis.com/execution-environment: gen2
        # Concurrency (requests per container instance)
        autoscaling.knative.dev/targetConcurrency: "80"
    spec:
      # Service account for accessing other GCP services
      serviceAccountName: micro-agent-service-account@PROJECT_ID.iam.gserviceaccount.com
      
      # Container timeout (max request processing time)
      timeoutSeconds: 300
      
      containers:
      - name: micro-agent-api
        # Cloud Run requires images in Google Container Registry or Artifact Registry
        image: gcr.io/PROJECT_ID/micro-agent-platform:latest
        
        ports:
        - name: http1
          containerPort: 8000
          
        env:
        # Application Configuration
        - name: FLASK_ENV
          value: "production"
        - name: FLASK_DEBUG
          value: "0"
        - name: API_PORT
          value: "8000"
        - name: LOG_LEVEL
          value: "INFO"
        - name: WORKERS
          value: "1"  # Cloud Run manages scaling, use 1 worker per container
          
        # Cloud Run specific environment variables
        - name: GOOGLE_CLOUD_PROJECT
          value: "PROJECT_ID"
        - name: CLOUD_RUN_SERVICE
          value: "micro-agent-api"
        - name: CLOUD_RUN_REVISION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['serving.knative.dev/revision']
              
        # LLM API Keys from Secret Manager
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: gemini-api-key
              key: latest
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: openai-api-key
              key: latest
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: anthropic-api-key  
              key: latest
              
        # Redis Cloud/Memorystore connection (if using external cache)
        - name: REDIS_HOST
          value: "10.0.0.3"  # Private IP of Memorystore Redis instance
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-password
              key: latest
              
        # Security and API configuration
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: api-key
              key: latest
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: flask-secret-key
              key: latest
              
        # Disable features not suitable for serverless
        - name: METRICS_ENABLED
          value: "false"  # Use Cloud Monitoring instead
        - name: PROMETHEUS_METRICS
          value: "false"  # Not needed in Cloud Run
          
        resources:
          limits:
            # Cloud Run resource limits
            memory: "2Gi"
            cpu: "2000m"  # 2 vCPUs
          requests:
            memory: "512Mi"
            cpu: "1000m"  # 1 vCPU
            
        # Cloud Run health checks
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 3
          failureThreshold: 3
          
        startupProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 1
          failureThreshold: 240  # Allow 4 minutes for cold start
          
        # Volume mounts for temporary storage
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
          
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: app-logs
        emptyDir:
          sizeLimit: 512Mi
          
  traffic:
  - percent: 100
    latestRevision: true